{"ast":null,"code":"var _jsxFileName = \"/Users/coreycolligan/Development/phase-3/phase-3-project/frontend/src/components/App.js\";\nimport React from 'react';\nimport Navbar from \"../components/Navbar\";\nimport ArchiveContainer from \"../containers/ArchiveContainer\";\nimport NoteContainer from \"../containers/NoteContainer\";\nimport ReminderContainer from \"../containers/ReminderContainer\";\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { Switch } from \"react-router\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      notes: [],\n      reminders: [],\n      // note: \"\"\n      archived: false,\n      expiredReminders: []\n    };\n\n    this.addNote = (e, noteObj) => {\n      e.preventDefault();\n      let newNote = {\n        title: noteObj.title,\n        datetime: new Date().toLocaleString(),\n        note: noteObj.note // image: noteObj.image,\n        // archived: false,\n        // details: [],\n\n      };\n      let reqObj = {};\n      reqObj.headers = {\n        'Content-Type': 'Application/json'\n      };\n      reqObj.method = 'POST';\n      reqObj.body = JSON.stringify(newNote);\n      fetch('http://localhost:9292/notes/', reqObj).then(resp => resp.json()).then(newNoteObj => {\n        this.setState({\n          notes: [newNoteObj, ...this.state.notes]\n        });\n      });\n    };\n\n    this.addReminder = (e, reminderObj) => {\n      e.preventDefault();\n      let newReminder = {\n        title: reminderObj.title,\n        datetime: new Date().toLocaleString(),\n        reminder_text: reminderObj.reminder_text,\n        reminder_date: new Date().toLocaleString(),\n        datetime: reminderObj.startDate // image: noteObj.image,\n        // archived: false,\n        // details: [],\n\n      };\n      let reqObj = {};\n      reqObj.headers = {\n        'Content-Type': 'Application/json'\n      };\n      reqObj.method = 'POST';\n      reqObj.body = JSON.stringify(newReminder);\n      fetch('http://localhost:9292/reminders/', reqObj).then(resp => resp.json()).then(newReminderObj => {\n        this.setState({\n          reminders: [newReminderObj, ...this.state.reminders]\n        });\n      });\n    };\n\n    this.updateNote = (e, updatedNoteText, noteObj) => {\n      e.preventDefault();\n      console.log(updatedNoteText);\n      let updatedNote = {\n        title: noteObj.title,\n        note: updatedNoteText,\n        datetime: noteObj.datetime // image: noteObj.image,\n        // details: [],\n\n      };\n      let reqObj = {};\n      reqObj.headers = {\n        'Content-Type': 'Application/json'\n      };\n      reqObj.method = 'PATCH';\n      reqObj.body = JSON.stringify(updatedNote);\n      fetch(`http://localhost:9292/notes/${noteObj.id}`, reqObj).then(resp => resp.json()).then(newNoteObj => {\n        this.setState({\n          notes: this.state.notes.map(note => {\n            if (note.id === newNoteObj.id) return newNoteObj;else return note;\n          })\n        });\n      });\n    };\n\n    this.updateReminder = (e, updatedReminderText, reminderObj) => {\n      e.preventDefault();\n      console.log(updatedReminderText);\n      let updatedReminder = {\n        title: reminderObj.title,\n        reminder_text: updatedReminderText,\n        datetime: reminderObj.datetime,\n        reminder_date: reminderObj.reminder_date // image: noteObj.image,\n        // details: [],\n\n      };\n      let reqObj = {};\n      reqObj.headers = {\n        'Content-Type': 'Application/json'\n      };\n      reqObj.method = 'PATCH';\n      reqObj.body = JSON.stringify(updatedReminder);\n      fetch(`http://localhost:9292/reminders/${reminderObj.id}`, reqObj).then(resp => resp.json()).then(newReminderObj => {\n        this.setState({\n          reminders: [newReminderObj, ...this.state.reminders]\n        });\n      });\n    };\n\n    this.deleteNote = noteObj => {\n      let newNotes = this.state.notes.filter(note => note.id !== noteObj.id);\n      fetch(`http://localhost:9292/notes/${noteObj.id}`, {\n        method: 'DELETE'\n      }).then(resp => resp.json()).then(() => this.setState({\n        notes: newNotes\n      }));\n    };\n\n    this.deleteReminder = reminderObj => {\n      let newReminders = this.state.reminders.filter(reminder => reminder.id !== reminderObj.id);\n      fetch(`http://localhost:9292/reminders/${reminderObj.id}`, {\n        method: 'DELETE'\n      }).then(resp => resp.json()).then(() => this.setState({\n        reminders: newReminders\n      }));\n    };\n\n    this.archiveNote = (archiveData, noteObj) => {\n      // console.log(favoriteData, postObj)  \n      let reqObj = {};\n      reqObj.headers = {\n        'Content-Type': 'Application/json'\n      };\n      reqObj.method = 'PATCH';\n      noteObj.archived === false ? reqObj.body = JSON.stringify({\n        archived: true\n      }) : reqObj.body = JSON.stringify({\n        archived: false\n      });\n      fetch(`http://localhost:3000/notes/${noteObj.id}`, reqObj).then(resp => resp.json()).then(updatedNoteObj => this.setState({\n        notes: this.state.notes.map(note => {\n          if (note.id === updatedNoteObj.id) return updatedNoteObj;else return note;\n        })\n      }));\n    };\n\n    this.archiveTimer = () => {// this.state.reminders.filter(reminder.reminder_date < new Date().toLocalString())\n    };\n\n    this.archiveReminder = (archiveNote, archiveStatus, reminderObj) => {\n      archiveNote(!this.props.note.archive, this.props.reminder);\n    };\n  }\n\n  // GET REQUEST\n  componentDidMount() {\n    fetch('http://localhost:9292/notes/').then(resp => resp.json()).then(noteData => this.setState({\n      notes: noteData\n    }));\n    fetch('http://localhost:9292/reminders').then(resp => resp.json()).then(reminderData => this.setState({\n      reminders: reminderData\n    }));\n  } // POST REQUEST\n\n\n  render() {\n    console.log(this.state.notes, this.state.reminders);\n    return /*#__PURE__*/_jsxDEV(Router, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/\",\n          component: () => /*#__PURE__*/_jsxDEV(NoteContainer, {\n            updateNote: this.updateNote,\n            addNote: this.addNote,\n            deleteNote: this.deleteNote // {this.state.notes.filter(note = note.archived === false) \n            // ? \n            ,\n            notes: this.state.notes // : null}\n\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/archive\",\n          component: () => /*#__PURE__*/_jsxDEV(ArchiveContainer, {\n            archiveNote: this.archiveNote,\n            deleteNote: this.deleteNote,\n            notes: this.state.notes\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/reminders\",\n          component: () => /*#__PURE__*/_jsxDEV(ReminderContainer, {\n            updateReminder: this.updateReminder,\n            addReminder: this.addReminder,\n            archiveNote: this.archivedNotes,\n            deleteReminder: this.deleteReminder,\n            reminders: this.state.reminders\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/coreycolligan/Development/phase-3/phase-3-project/frontend/src/components/App.js"],"names":["React","Navbar","ArchiveContainer","NoteContainer","ReminderContainer","BrowserRouter","Router","Route","Switch","App","Component","state","notes","reminders","archived","expiredReminders","addNote","e","noteObj","preventDefault","newNote","title","datetime","Date","toLocaleString","note","reqObj","headers","method","body","JSON","stringify","fetch","then","resp","json","newNoteObj","setState","addReminder","reminderObj","newReminder","reminder_text","reminder_date","startDate","newReminderObj","updateNote","updatedNoteText","console","log","updatedNote","id","map","updateReminder","updatedReminderText","updatedReminder","deleteNote","newNotes","filter","deleteReminder","newReminders","reminder","archiveNote","archiveData","updatedNoteObj","archiveTimer","archiveReminder","archiveStatus","props","archive","componentDidMount","noteData","reminderData","render","archivedNotes"],"mappings":"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","sourcesContent":["\nimport React from 'react'\nimport Navbar from \"../components/Navbar\"\nimport ArchiveContainer from \"../containers/ArchiveContainer\"\nimport NoteContainer from \"../containers/NoteContainer\"\nimport ReminderContainer from \"../containers/ReminderContainer\"\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport { Switch } from \"react-router\";\n\nclass App extends React.Component {\n\n  state = {\n    notes: [],\n    reminders: [],\n    // note: \"\"\n    archived: false,\n    expiredReminders: []\n  }\n\n  // GET REQUEST\n  componentDidMount() {\n    fetch('http://localhost:9292/notes/')\n      .then(resp => resp.json())\n      .then(noteData => this.setState({ notes: noteData }))\n    fetch('http://localhost:9292/reminders')\n      .then(resp => resp.json())\n      .then(reminderData => this.setState({ reminders: reminderData }))\n\n  }\n\n\n  // POST REQUEST\n  addNote = (e, noteObj) => {\n    e.preventDefault()\n    let newNote = {\n      title: noteObj.title,\n      datetime: new Date().toLocaleString(),\n      note: noteObj.note,\n      // image: noteObj.image,\n      // archived: false,\n      // details: [],\n    }\n\n    let reqObj = {}\n    reqObj.headers = { 'Content-Type': 'Application/json' }\n    reqObj.method = 'POST'\n    reqObj.body = JSON.stringify(newNote)\n\n    fetch('http://localhost:9292/notes/', reqObj)\n      .then(resp => resp.json())\n      .then(newNoteObj => {\n        this.setState({ notes: [newNoteObj, ...this.state.notes] })\n      })\n  }\n  addReminder = (e, reminderObj) => {\n    e.preventDefault()\n    let newReminder = {\n      title: reminderObj.title,\n      datetime: new Date().toLocaleString(),\n      reminder_text: reminderObj.reminder_text,\n      reminder_date: new Date().toLocaleString(),\n      datetime: reminderObj.startDate\n      // image: noteObj.image,\n      // archived: false,\n      // details: [],\n    }\n\n    let reqObj = {}\n    reqObj.headers = { 'Content-Type': 'Application/json' }\n    reqObj.method = 'POST'\n    reqObj.body = JSON.stringify(newReminder)\n\n    fetch('http://localhost:9292/reminders/', reqObj)\n      .then(resp => resp.json())\n      .then(newReminderObj => {\n        this.setState({ reminders: [newReminderObj, ...this.state.reminders] })\n      })\n  }\n\n  // PATCH REQUEST (update note)\n  updateNote = (e, updatedNoteText, noteObj) => {\n    e.preventDefault()\n    console.log(updatedNoteText)\n    let updatedNote = {\n      title: noteObj.title,\n      note: updatedNoteText,\n      datetime: noteObj.datetime,\n      // image: noteObj.image,\n      // details: [],\n    }\n\n    let reqObj = {}\n    reqObj.headers = { 'Content-Type': 'Application/json' }\n    reqObj.method = 'PATCH'\n    reqObj.body = JSON.stringify(updatedNote)\n\n    fetch(`http://localhost:9292/notes/${noteObj.id}`, reqObj)\n      .then(resp => resp.json())\n      .then(newNoteObj => {\n        this.setState({ notes: this.state.notes.map(note => {\n          if(note.id === newNoteObj.id) return newNoteObj\n          else return note\n        })\n        })\n      })\n  }\n\n\n  \n  updateReminder = (e, updatedReminderText, reminderObj) => {\n    e.preventDefault()\n    console.log(updatedReminderText)\n    let updatedReminder = {\n      title: reminderObj.title,\n      reminder_text: updatedReminderText,\n      datetime: reminderObj.datetime,\n      reminder_date: reminderObj.reminder_date\n      // image: noteObj.image,\n      // details: [],\n    }\n\n    let reqObj = {}\n    reqObj.headers = { 'Content-Type': 'Application/json' }\n    reqObj.method = 'PATCH'\n    reqObj.body = JSON.stringify(updatedReminder)\n\n    fetch(`http://localhost:9292/reminders/${reminderObj.id}`, reqObj)\n      .then(resp => resp.json())\n      .then(newReminderObj => {\n        this.setState({ reminders: [newReminderObj, ...this.state.reminders] })\n      })\n  }\n\n  // DELETE REQUEST\n  deleteNote = (noteObj) => {\n    let newNotes = this.state.notes.filter(note => note.id !== noteObj.id)\n\n    fetch(`http://localhost:9292/notes/${noteObj.id}`, { method: 'DELETE' })\n      .then(resp => resp.json())\n      .then(() => this.setState({ notes: newNotes }))\n  }\n\n  deleteReminder = (reminderObj) => {\n    let newReminders = this.state.reminders.filter(reminder => reminder.id !== reminderObj.id)\n\n    fetch(`http://localhost:9292/reminders/${reminderObj.id}`, { method: 'DELETE' })\n      .then(resp => resp.json())\n      .then(() => this.setState({ reminders: newReminders }))\n  }\n\n\n  // ARCHIVE NOTE\n  archiveNote = (archiveData, noteObj) => {\n\n    // console.log(favoriteData, postObj)  \n    let reqObj = {}\n    reqObj.headers = { 'Content-Type': 'Application/json' }\n    reqObj.method = 'PATCH'\n\n    noteObj.archived === false\n      ? reqObj.body = JSON.stringify({\n        archived: true\n      })\n      : reqObj.body = JSON.stringify({\n        archived: false\n      })\n\n    fetch(`http://localhost:3000/notes/${noteObj.id}`, reqObj)\n      .then(resp => resp.json())\n      .then(updatedNoteObj => this.setState({\n        notes: this.state.notes.map(note => {\n          if (note.id === updatedNoteObj.id) return updatedNoteObj\n          else return note\n        })\n      }))\n  }\n\narchiveTimer = () => {\n// this.state.reminders.filter(reminder.reminder_date < new Date().toLocalString())\n}\narchiveReminder = (archiveNote, archiveStatus, reminderObj) => {\n  archiveNote(!this.props.note.archive, this.props.reminder)\n}\n\n\n\n\n  render() {\n\n    console.log(this.state.notes, this.state.reminders)\n    return (\n      <Router>\n        <div>\n          <Navbar />\n          <br />\n          {/* <Switch> */}\n          <Route exact path=\"/\" component={() =>\n            <NoteContainer\n              updateNote={this.updateNote}\n              addNote={this.addNote}\n              deleteNote={this.deleteNote}\n              // {this.state.notes.filter(note = note.archived === false) \n              // ? \n              notes={this.state.notes}\n            // : null}\n            />} />\n\n          <Route exact path=\"/archive\" component={() =>\n            <ArchiveContainer\n              archiveNote={this.archiveNote}\n              deleteNote={this.deleteNote}\n              notes={this.state.notes}\n            />} />\n\n          <Route exact path=\"/reminders\" component={() =>\n            <ReminderContainer\n              updateReminder={this.updateReminder}\n              addReminder={this.addReminder}\n              archiveNote={this.archivedNotes}\n              deleteReminder={this.deleteReminder}\n              reminders={this.state.reminders}\n            />} />\n          {/* </Switch> */}\n        </div>\n      </Router>\n    )\n\n\n\n  }\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}