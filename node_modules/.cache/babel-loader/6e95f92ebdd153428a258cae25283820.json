{"ast":null,"code":"var _jsxFileName = \"/Users/ryanandrews/Development/Code/Mod3/stickynotes/stickynotes_frontend/src/components/Reminder.js\";\nimport React, { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Reminder extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      reminder_text: this.props.reminder.reminder_text,\n      edit: false,\n      newReminder: \"\"\n    };\n\n    this.toggleEdit = e => {\n      e.preventDefault();\n      this.setState({\n        edit: !this.state.edit\n      });\n    };\n\n    this.toggleOff = e => {\n      // debugger\n      console.log(e.target.className);\n      this.state.edit !== false && e.target.className !== \"inputText\" && this.setState({\n        edit: !this.state.edit\n      });\n    };\n\n    this.handleUpdatedReminder = updatedReminder => {\n      this.setState({\n        newReminder: updatedReminder\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: e => this.toggleOff(e),\n      className: \"note\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"title\",\n          children: this.props.reminder.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.props.deleteReminder(this.props.reminder),\n          children: \"X\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this), this.state.edit ? /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: e => this.props.updateReminder(e, this.state.newReminder, this.props.reminder),\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          defaultValue: this.state.reminder_text //    name=\"updatedNote\" \n          ,\n          className: \"inputText\" //    value={this.state.updatedNote}\n          ,\n          onChange: e => this.handleUpdatedReminder(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 23\n      }, this) : /*#__PURE__*/_jsxDEV(\"h4\", {\n        className: this.state.reminder_text,\n        onClick: e => this.toggleEdit(e),\n        children: this.state.reminder_text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 23\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: this.props.reminder.datetime\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.props.archiveReminder(!this.props.reminder.archive, this.props.reminder, this.props.reminder.archived !== null ? alert(\"Archived!\") : alert(\"Unarchived :(\")),\n          children: \"Archive\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this)]\n    }, this.props.reminder.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Reminder;","map":{"version":3,"sources":["/Users/ryanandrews/Development/Code/Mod3/stickynotes/stickynotes_frontend/src/components/Reminder.js"],"names":["React","Component","Reminder","state","reminder_text","props","reminder","edit","newReminder","toggleEdit","e","preventDefault","setState","toggleOff","console","log","target","className","handleUpdatedReminder","updatedReminder","render","title","deleteReminder","updateReminder","value","datetime","archiveReminder","archive","archived","alert","id"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nclass Reminder extends Component {\n    state = {\n        reminder_text: this.props.reminder.reminder_text,\n        edit: false,\n        newReminder: \"\",\n    }\n\n    toggleEdit = (e) => {\n        e.preventDefault()\n        this.setState({\n            edit: !this.state.edit,\n        })\n    }\n    toggleOff = (e) => {\n        // debugger\n        console.log(e.target.className)\n        this.state.edit !== false\n            && e.target.className !== \"inputText\"\n            && this.setState({\n                edit: !this.state.edit,\n            })\n    }\n\n    handleUpdatedReminder = (updatedReminder) => {\n        this.setState({\n            newReminder: updatedReminder,\n        })\n    }\n\n    render() {\n        return (\n            <div onClick={(e) => this.toggleOff(e)}\n                key={this.props.reminder.id} className='note'>\n\n                <span>\n                    {/* REMINDER TITLE */}\n                    <h3 className='title'>{this.props.reminder.title}</h3>\n                    <br></br>\n\n                    {/* DELETE REMINDER */}\n                    <button onClick={() => this.props.deleteReminder(this.props.reminder)}>X</button>\n                </span>\n\n                {/* <img src={this.props.note.image}></img> */}\n\n                {/* EDIT REMINDER */}\n                {this.state.edit\n                    ? <form onSubmit={(e) => this.props.updateReminder(e, this.state.newReminder, this.props.reminder)}>\n                        <input\n                            type=\"text\"\n                            defaultValue={this.state.reminder_text}\n                            //    name=\"updatedNote\" \n                            className=\"inputText\"\n                            //    value={this.state.updatedNote}\n                            onChange={(e) => this.handleUpdatedReminder(e.target.value)}\n                        ></input>\n                    </form>\n                    : <h4 className={this.state.reminder_text} onClick={(e) => this.toggleEdit(e)}>{this.state.reminder_text}</h4>}\n\n                {/* onClick everywhere that isn't the form changes state */}\n                {/* ARCHIVE BUTTON AND TIMESTAMP */}\n                <h4>{this.props.reminder.datetime}</h4>\n\n                <span>\n                    <button onClick={() => this.props.archiveReminder(!this.props.reminder.archive, this.props.reminder,\n                        this.props.reminder.archived !== null ? alert(\"Archived!\") : alert(\"Unarchived :(\"))}>Archive</button>\n                </span>\n            </div>\n        );\n    }\n}\n\nexport default Reminder;"]},"metadata":{},"sourceType":"module"}