{"ast":null,"code":"var _jsxFileName = \"/Users/coreycolligan/Development/phase-3/phase-3-project/frontend/src/components/App.js\";\nimport React from 'react';\nimport Navbar from \"../components/Navbar\";\nimport ArchiveContainer from \"../containers/ArchiveContainer\";\nimport NoteContainer from \"../containers/NoteContainer\";\nimport ReminderContainer from \"../containers/ReminderContainer\";\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { Switch } from \"react-router\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      notes: [],\n      // note: \"\"\n      archived: false\n    };\n\n    this.addNote = (e, noteObj) => {\n      e.preventDefault();\n      let newNote = {\n        title: noteObj.title,\n        datetime: new Date().toLocaleString(),\n        note: noteObj.note // image: noteObj.image,\n        // archived: false,\n        // details: [],\n\n      };\n      let reqObj = {};\n      reqObj.headers = {\n        'Content-Type': 'Application/json'\n      };\n      reqObj.method = 'POST';\n      reqObj.body = JSON.stringify(newNote);\n      fetch('http://localhost:9292/notes/', reqObj).then(resp => resp.json()).then(newNoteObj => {\n        this.setState({\n          notes: [newNoteObj, ...this.state.notes]\n        });\n      });\n    };\n\n    this.updateNote = (e, updatedNoteText, noteObj) => {\n      e.preventDefault();\n      console.log(updatedNoteText);\n      let updatedNote = {\n        title: noteObj.title,\n        note: updatedNoteText,\n        datetime: noteObj.datetime // image: noteObj.image,\n        // details: [],\n\n      };\n      let reqObj = {};\n      reqObj.headers = {\n        'Content-Type': 'Application/json'\n      };\n      reqObj.method = 'PATCH';\n      reqObj.body = JSON.stringify(updatedNote);\n      fetch(`http://localhost:9292/notes/${noteObj.id}`, reqObj).then(resp => resp.json()).then(newNoteObj => {\n        this.setState({\n          notes: [newNoteObj, ...this.state.notes]\n        });\n      });\n    };\n\n    this.deleteNote = noteObj => {\n      let newNotes = this.state.notes.filter(note => note.id !== noteObj.id);\n      fetch(`http://localhost:9292/notes/${noteObj.id}`, {\n        method: 'DELETE'\n      }).then(resp => resp.json()).then(() => this.setState({\n        notes: newNotes\n      }));\n    };\n\n    this.archiveNote = (archiveData, noteObj) => {\n      // console.log(favoriteData, postObj)  \n      let reqObj = {};\n      reqObj.headers = {\n        'Content-Type': 'Application/json'\n      };\n      reqObj.method = 'PATCH';\n      noteObj.archived === false ? reqObj.body = JSON.stringify({\n        archived: true\n      }) : reqObj.body = JSON.stringify({\n        archived: false\n      });\n      fetch(`http://localhost:3000/notes/${noteObj.id}`, reqObj).then(resp => resp.json()).then(updatedNoteObj => this.setState({\n        notes: this.state.notes.map(note => {\n          if (note.id === updatedNoteObj.id) return updatedNoteObj;else return note;\n        })\n      }));\n    };\n  }\n\n  // GET REQUEST\n  componentDidMount() {\n    fetch('http://localhost:9292/notes/').then(resp => resp.json()).then(noteData => this.setState({\n      notes: noteData\n    }));\n  } // POST REQUEST\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Router, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/\",\n          component: () => /*#__PURE__*/_jsxDEV(NoteContainer, {\n            updateNote: this.updateNote,\n            addNote: this.addNote,\n            deleteNote: this.deleteNote,\n            notes: this.state.notes\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/archive\",\n          component: () => /*#__PURE__*/_jsxDEV(ArchiveContainer, {\n            archiveNote: this.archiveNote,\n            deleteNote: this.deleteNote,\n            notes: this.state.notes\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/reminders\",\n          component: () => /*#__PURE__*/_jsxDEV(ReminderContainer // add={this.reminderNotes}\n          , {\n            archiveNote: this.archivedNotes,\n            deleteNote: this.deleteNote\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 5\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/coreycolligan/Development/phase-3/phase-3-project/frontend/src/components/App.js"],"names":["React","Navbar","ArchiveContainer","NoteContainer","ReminderContainer","BrowserRouter","Router","Route","Switch","App","Component","state","notes","archived","addNote","e","noteObj","preventDefault","newNote","title","datetime","Date","toLocaleString","note","reqObj","headers","method","body","JSON","stringify","fetch","then","resp","json","newNoteObj","setState","updateNote","updatedNoteText","console","log","updatedNote","id","deleteNote","newNotes","filter","archiveNote","archiveData","updatedNoteObj","map","componentDidMount","noteData","render","archivedNotes"],"mappings":"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","sourcesContent":["\nimport React from 'react'\nimport Navbar from \"../components/Navbar\"\nimport ArchiveContainer from \"../containers/ArchiveContainer\"\nimport NoteContainer from \"../containers/NoteContainer\"\nimport ReminderContainer from \"../containers/ReminderContainer\"\nimport { BrowserRouter as Router, Route} from 'react-router-dom';\nimport { Switch } from \"react-router\";\n\nclass App extends React.Component {\n\n  state = {\n    notes: [],\n    // note: \"\"\n    archived: false,\n   }\n  \n  // GET REQUEST\n   componentDidMount() {\n    fetch('http://localhost:9292/notes/')\n    .then(resp => resp.json())\n    .then(noteData => this.setState({notes: noteData}))\n  }\n\n  // POST REQUEST\n  addNote = (e, noteObj) => {\n  e.preventDefault()\n    let newNote = {\n      title: noteObj.title,\n      datetime: new Date().toLocaleString(),\n      note: noteObj.note,\n      // image: noteObj.image,\n      // archived: false,\n      // details: [],\n    }\n  \n  let reqObj = {}\n  reqObj.headers = {'Content-Type': 'Application/json'}\n  reqObj.method = 'POST'\n  reqObj.body = JSON.stringify(newNote)\n\n  fetch('http://localhost:9292/notes/', reqObj)\n  .then(resp => resp.json())\n  .then(newNoteObj => {\n    this.setState({notes: [newNoteObj, ...this.state.notes]})\n    })\n  }\n\n// PATCH REQUEST (update note)\nupdateNote = (e, updatedNoteText, noteObj) => {\n  e.preventDefault()\n  console.log(updatedNoteText)\n    let updatedNote = {\n      title: noteObj.title,\n      note: updatedNoteText,\n      datetime: noteObj.datetime,\n      // image: noteObj.image,\n      // details: [],\n    }\n\n  let reqObj = {}\n  reqObj.headers = {'Content-Type': 'Application/json'}\n  reqObj.method = 'PATCH'\n  reqObj.body = JSON.stringify(updatedNote)\n  \n  fetch(`http://localhost:9292/notes/${noteObj.id}`, reqObj)\n  .then(resp => resp.json())\n  .then(newNoteObj => {\n    this.setState({notes: [newNoteObj, ...this.state.notes]})\n    })\n  }\n\n// DELETE REQUEST\ndeleteNote = (noteObj) => {\n    let newNotes = this.state.notes.filter(note => note.id !== noteObj.id)\n\n    fetch(`http://localhost:9292/notes/${noteObj.id}`, {method: 'DELETE'})\n    .then(resp => resp.json())\n    .then(() => this.setState({notes: newNotes}))\n  }\n\n// ARCHIVE NOTE\narchiveNote = (archiveData, noteObj) => {\n    \n    // console.log(favoriteData, postObj)  \n\n        \n        let reqObj = {}\n          reqObj.headers = {'Content-Type': 'Application/json'}\n          reqObj.method = 'PATCH'\n\n        noteObj.archived === false \n        ? reqObj.body = JSON.stringify({\n          archived: true }) \n        : reqObj.body = JSON.stringify({\n          archived: false }) \n    \n        fetch(`http://localhost:3000/notes/${noteObj.id}`, reqObj)\n        .then(resp => resp.json())\n        .then(updatedNoteObj => this.setState({\n          notes: this.state.notes.map(note => {\n            if(note.id === updatedNoteObj.id) return updatedNoteObj\n            else return note\n          })\n        }))\n      }\n\n\n\n render() {\n  \n\n  return (\n    <Router>\n    <div>\n        <Navbar  />\n        <br/>\n        {/* <Switch> */}\n        <Route exact path=\"/\" component={() => \n        <NoteContainer  \n        updateNote={this.updateNote} \n        addNote={this.addNote}  \n        deleteNote={this.deleteNote} \n        notes={this.state.notes}\n        />} />\n          \n        <Route exact path=\"/archive\" component={ () => \n        <ArchiveContainer \n        archiveNote={this.archiveNote} \n        deleteNote={this.deleteNote}  \n        notes={this.state.notes}\n        />} />\n\n        <Route exact path=\"/reminders\" component={ () => \n        <ReminderContainer \n        // add={this.reminderNotes}\n\n        archiveNote={this.archivedNotes} \n        deleteNote={this.deleteNote}  \n        />} />\n        {/* </Switch> */}\n    </div>\n  </Router>\n  )\n \n    \n    \n  }\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}